name: Optimized Build for Xiaomi 10 Pro (cmi)
on:
  workflow_dispatch:
    inputs:
      phone:
        description: '选择手机型号：'
        required: true
        default: 'MI10_Pro'
        type: choice
        options:
          - MI10_Pro
      version:
        description: '自定义版本名（如perf-xxx）/可为空（则为perf）'
        required: false
        type: string

jobs:
  build_job:
    runs-on: ubuntu-22.04
    env:
      CI: "false"
      KERNEL_DIR: ${{ github.workspace }}/kernel_workspace/android_kernel
      CLANG_VERSION: "21.0.0git-20250422"
      ARCH: arm64
      SUBARCH: arm64

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 安装编译依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev ncurses-dev xmlto kmod flex bison ccache \
            zlib1g-dev libelf-dev libdw-dev libiberty-dev \
            python3-dev libcap-dev bc rsync lz4 liblz4-tool \
            dwarves libncurses5-dev libpci-dev pigz

      - name: 1.下载编译工具
        run: |
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace
          cd $GITHUB_WORKSPACE/kernel_workspace
          wget -q https://github.com/ZyCromerZ/Clang/releases/download/${CLANG_VERSION}-release/Clang-${CLANG_VERSION}.tar.gz
          mkdir -p clang
          tar --use-compress-program=pigz -xf Clang-${CLANG_VERSION}.tar.gz -C clang
          ccache --max-size=5G

      - name: 2.克隆源码与补丁
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/yspbwx2010/kernel_xiaomi_sm8250_mod.git --depth=1 android_kernel
          git clone https://github.com/nobbs00/AnyKernel3.git src

      - name: 3.安装KSUN
        run: |
          cd ${env:KERNEL_DIR}
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs

      - name: 6.开始构建
        run: |
          export PATH=${env:KERNEL_DIR}/../clang/bin:$PATH
          export MAKE_ARGS="O=out"
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          
          # Clang 21优化参数
          export KCFLAGS="\
            -march=armv8.2-a+crypto+dotprod \
            -mcpu=cortex-a77 \
            -flto=thin \
            -fno-strict-aliasing \
            -fno-common \
            -pipe \
            -Wno-error=unused-function \
            -Wno-error=maybe-uninitialized \
            -Wno-error=unused-variable \
            -Wno-error=unused-value \
            -Wno-error=date-time"

          export LDFLAGS="\
            -plugin ${env:KERNEL_DIR}/../clang/lib/LLVMgold.so \
            -Wl,-mllvm,-import-instr-limit=30"

          cd ${env:KERNEL_DIR}
          
          # 版本处理
          if [ -n "${{ inputs.version }}" ]; then
            sed -i 's/ -dirty//g' ./scripts/setlocalversion
            sed -i '$s|echo "$res"|echo "-perf-${{ inputs.version }}"|' ./scripts/setlocalversion
          else
            sed -i 's/ -dirty//g' ./scripts/setlocalversion
            sed -i '$s|echo "$res"|echo "-perf"|' ./scripts/setlocalversion
          fi

          # 设备配置
          case "${{ inputs.phone }}" in
              "MI10_Pro")
                  DEFCONFIG="cmi_defconfig"
                  ;;
              *)
                  echo "错误：未知设备"
                  exit 1
                  ;;
          esac

          # 生成配置
          make ARCH=${env:ARCH} $MAKE_ARGS $DEFCONFIG

          # 硬件特性优化配置
          scripts/config --file out/.config \
            # CPU调度优化
            -e SCHED_WALT \
            -e WALT_FORCE_SYNC \
            -e CAPACITY_RESERVE \
            -e ENERGY_AWARE_SCHEDULING \
            -e CPU_FREQ_GOV_SCHEDUTIL \
            -e CPU_FREQ_GOV_PERFORMANCE \
            -e UCLAMP_TASK_GROUP \
            # 内存管理优化
            -e MEMORY_HOTPLUG \
            -e COMPACTION \
            -e KSM \
            -e TRANSPARENT_HUGEPAGE \
            -e ZSWAP_COMPACTION \
            # 网络优化
            -e FAST_UDP \
            -e TCP_CONG_WESTWOOD \
            -e DEFAULT_WESTWOOD \
            # GPU驱动优化
            -e KGSL_PER_PROCESS_PAGE_TABLE \
            -e KGSL_IOCOHERENT_DEFAULT \
            -e MSM_KGSL_USE_IOCOHERENT \
            # 文件系统优化
            -e F2FS_FS \
            -e F2FS_FS_SECURITY \
            -e F2FS_FS_ENCRYPTION \
            -e F2FS_STAT_FS \
            # 硬件加速
            -e CRYPTO_SHA2_ARM64_CE \
            -e CRYPTO_AES_ARM64 \
            -e CRYPTO_GHASH_ARM64_CE \
            # 调试优化
            -d DEBUG_SECTION_MISMATCH \
            -d DEBUG_OBJECTS \
            -d RUNTIME_TESTING_MENU
            -e CRYPTO_LZ4K \
            -e CRYPTO_LZ4KD \
            -e CRYPTO_ZSTD \
            -e CRYPTO_842 \
            -e CRYPTO_LZO \
            -e CRYPTO_DEFLATE \
            --set-str ZRAM_DEF_COMP lz4kd \
            -e ZRAM_DEF_COMP_LZ4KD \
            -e SWAP \
            -e ZSWAP \
            -e ANDROID_SIMPLE_LMK

          # 应用MIUI优化配置
          echo "🔧 应用MIUI优化配置..."
          scripts/config --file out/.config \
            --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
                   -e PERF_CRITICAL_RT_TASK \
                  -e SF_BINDER \
                  -e OVERLAY_FS \
                  -d DEBUG_FS \
                  -e MIGT \
                  -e MIGT_ENERGY_MODEL \
                  -e MIHW \
                  -e PACKAGE_RUNTIME_INFO \
                  -e BINDER_OPT \
                  -e KPERFEVENTS \
                  -e MILLET \
                  -e PERF_HUMANTASK \
                  -e LTO_CLANG \
                  -d LOCALVERSION_AUTO \
                  -e SF_BINDER \
                  -e XIAOMI_MIUI \
                  -d MI_MEMORY_SYSFS \
                  -e TASK_DELAY_ACCT \
                  -e MIUI_ZRAM_MEMORY_TRACKING \
                  -d CONFIG_MODULE_SIG_SHA512 \
                  -d CONFIG_MODULE_SIG_HASH \
                  -e MI_FRAGMENTION \
                  -e PERF_HELPER \
                  -e BOOTUP_RECLAIM \
                  -e MI_RECLAIM \
                  -e RTMM

          # 追加KernelSU配置到当前配置
              scripts/config --file out/.config \
                  -e KSU \
                  -e KSU_MANUAL_HOOK \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -d KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -d KSU_SUSFS_SUS_SU
                  

          # 编译参数优化
          scripts/config --file out/.config \
            --set-str CONFIG_CC_VERSION_TEXT "Clang 21.0.0git" \
            --set-str CONFIG_LD_VERSION "LLD 17.0.0" \
            -e LTO_CLANG_THIN \
            -e THIN_ARCHIVES \
            -e HAVE_ARCH_PREL32_RELOCATIONS

          # 执行编译
          time make -j$(($(nproc) * 2)) \
            ARCH=${env:ARCH} \
            $MAKE_ARGS \
            CC="clang" \
            LD="ld.lld" \
            AR="llvm-ar" \
            NM="llvm-nm" \
            STRIP="llvm-strip" \
            OBJCOPY="llvm-objcopy" \
            OBJDUMP="llvm-objdump" \
            READELF="llvm-readelf" \
            HOSTCC="clang" \
            HOSTCXX="clang++" \
            HOSTAR="llvm-ar" \
            HOSTLD="ld.lld" \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="${KCFLAGS}" \
            LDFLAGS="${LDFLAGS}"

      - name: 7.处理编译产物
        run: |
          KERNEL_IMAGE="${env:KERNEL_DIR}/out/arch/${env:ARCH}/boot/Image"
          [ ! -f "$KERNEL_IMAGE" ] && { echo "错误：内核镜像未找到！"; exit 1; }
          
          # 生成版本信息
          strings "$KERNEL_IMAGE" | grep "Linux version" > version_info.txt
          ${env:KERNEL_DIR}/../clang/bin/llvm-readelf -a "$KERNEL_IMAGE" > kernel_symbols.txt

          # 打包刷机包
          ANY_KERNEL_DIR="$GITHUB_WORKSPACE/kernel_workspace/src/"
          cp "$KERNEL_IMAGE" "$ANY_KERNEL_DIR/Image"
          cp version_info.txt kernel_symbols.txt "$ANY_KERNEL_DIR/"
          
          cd "$ANY_KERNEL_DIR"
          zip -r9 "MI10Pro-Kernel-${{ inputs.version || 'perf' }}.zip" ./*

      - name: 8.上传产物
        uses: actions/upload-artifact@v4
        with:
          name: MI10Pro_${{ inputs.version || 'perf' }}_$(date +%Y%m%d%H%M)
          path: |
            kernel_workspace/src/*.zip
            kernel_workspace/src/version_info.txt
          retention-days: 7
