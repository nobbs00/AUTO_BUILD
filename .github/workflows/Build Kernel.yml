name: Optimized Build for Xiaomi 10 Pro (cmi)
on:
  workflow_dispatch:
    inputs:
      phone:
        description: 'ÈÄâÊã©ÊâãÊú∫ÂûãÂè∑Ôºö'
        required: true
        default: 'MI10_Pro'
        type: choice
        options:
          - MI10_Pro

jobs:
  build_job:
    runs-on: ubuntu-22.04
    env:
      CI: "false"
      KERNEL_DIR: ${{ github.workspace }}/kernel_workspace/android_kernel
      CLANG_VERSION: "21.0.0git-20250423"
      ARCH: arm64
      SUBARCH: arm64

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: ‚öôÔ∏è ÈÖçÁΩÆ ccache
        run: |
          sudo apt install ccache
          mkdir -p "${{ github.workspace }}/ccache"
          ccache --version
          ccache --max-size=10G
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache --set-config=hash_dir=false
          ccache --set-config=max_files=0
          
          echo "CCACHE_DIR=${{ github.workspace }}/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.KERNEL_DIR }}" >> $GITHUB_ENV
          echo "CCACHE_COMPILERCHECK=content" >> $GITHUB_ENV
          echo "$(dirname $(which ccache))" >> $GITHUB_PATH
          ccache --zero-stats

      - name: üì• ÊÅ¢Â§ç ccache ÁºìÂ≠ò
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/ccache
          key: ccache-${{ github.event.inputs.phone }}-clang-${{ hashFiles('android_kernel/**/arch/arm64/configs/*_defconfig', '**/KernelSU-Next/**','**/scripts/setlocalversion', '**/Makefile') }}
          restore-keys: |
            ccache-${{ github.event.inputs.phone }}-
            ccache-

      - name: ÂÆâË£ÖÁºñËØë‰æùËµñ
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev ncurses-dev xmlto kmod flex bison \
            zlib1g-dev libelf-dev libdw-dev libiberty-dev \
            python3-dev libcap-dev bc rsync lz4 liblz4-tool \
            dwarves libncurses5-dev libpci-dev pigz gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            binutils-aarch64-linux-gnu \
            binutils-arm-linux-gnueabi

      - name: 1.‰∏ãËΩΩÁºñËØëÂ∑•ÂÖ∑
        run: |
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace
          cd $GITHUB_WORKSPACE/kernel_workspace
          wget -q https://github.com/ZyCromerZ/Clang/releases/download/${CLANG_VERSION}-release/Clang-${CLANG_VERSION}.tar.gz
          mkdir -p clang
          tar --use-compress-program=pigz -xf Clang-${CLANG_VERSION}.tar.gz -C clang

      - name: 2.ÂÖãÈöÜÊ∫êÁ†Å‰∏éË°•‰∏Å
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/yspbwx2010/kernel_xiaomi_sm8250_mod.git --depth=1 android_kernel
          git clone https://github.com/nobbs00/AnyKernel3.git src

      - name: 3.ÂÆâË£ÖKSUN
        run: |
          cd ${KERNEL_DIR}
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs

      - name: 4.ÂºÄÂßãÊûÑÂª∫
        run: |
          export PATH=${KERNEL_DIR}/../clang/bin:$PATH
          export MAKE_ARGS="O=out"
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export KCFLAGS="\
            -march=armv8.2-a+crypto+dotprod \
            -mcpu=cortex-a77 \
            -flto=thin \
            -fno-strict-aliasing \
            -fno-common \
            -pipe \
            -Wno-error -mllvm -import-instr-limit=30"

          export LDFLAGS="\
            -plugin ${KERNEL_DIR}/../clang/lib/LLVMgold.so"

          cd ${KERNEL_DIR}
          

          # ËÆæÂ§áÈÖçÁΩÆ
          case "${{ github.event.inputs.phone }}" in
              "MI10_Pro")
                  DEFCONFIG="cmi_defconfig"
                  ;;
              *)
                  echo "ÈîôËØØÔºöÊú™Áü•ËÆæÂ§á"
                  exit 1
                  ;;
          esac

          # ÁîüÊàêÈÖçÁΩÆ
          make ARCH=${ARCH} SUBARCH=${SUBARCH} $MAKE_ARGS $DEFCONFIG

          # Á°¨‰ª∂ÁâπÊÄß‰ºòÂåñÈÖçÁΩÆ
          scripts/config --file out/.config \
            -e KALLSYMS \
            -e KALLSYMS_ALL \
            -e KPROBES \
            -e HAVE_KPROBES \
            -e KPROBE_EVENTS \
            -e TMPFS_XATTR=y \
            -e TMPFS_POSIX_ACL \
            -e IP_NF_TARGET_TTL \
            -e IP6_NF_TARGET_HL \
            -e IP6_NF_MATCH_HL \
            -e UCLAMP_TASK \
            -e TCP_CONG_ADVANCED \
            -e TCP_CONG_BIC \
            -e TCP_CONG_CUBIC \
            -e TCP_CONG_WESTWOOD \
            -e TCP_CONG_HTCP \
            -e TCP_CONG_HSTCP \
            -e TCP_CONG_HYBLA \
            -e TCP_CONG_VEGAS \
            -e TCP_CONG_NV \
            -e TCP_CONG_SCALABLE \
            -e TCP_CONG_LP \
            -e TCP_CONG_VENO \
            -e TCP_CONG_YEAH \
            -e TCP_CONG_ILLINOIS \
            -e TCP_CONG_DCTCP \
            -e TCP_CONG_CDG \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            -e NET_SCHED \
            -e NET_SCH_HTB \
            -e NET_SCH_HFSC \
            -e NET_SCH_PRIO \
            -e NET_SCH_MULTIQ \
            -e NET_SCH_RED \
            -e NET_SCH_SFB \
            -e NET_SCH_SFQ \
            -e NET_SCH_TEQL \
            -e NET_SCH_TBF \
            -e NET_SCH_CBS \
            -e NET_SCH_ETF \
            -e NET_SCH_TAPRIO \
            -e NET_SCH_GRED \
            -e NET_SCH_NETEM \
            -e NET_SCH_DRR \
            -e NET_SCH_MQPRIO \
            -e NET_SCH_SKBPRIO \
            -e NET_SCH_CHOKE \
            -e NET_SCH_QFQ \
            -e NET_SCH_CODEL \
            -e NET_SCH_FQ_CODEL \
            -e NET_SCH_CAKE \
            -e NET_SCH_FQ \
            -e NET_SCH_HHF \
            -e NET_SCH_PIE \
            -e NET_SCH_FQ_PIE \
            -e NET_SCH_INGRESS \
            -e NET_SCH_PLUG \
            -e NET_SCH_ETS \
            -e NET_SCH_FIFO \
            -e NET_SCH_DEFAULT \
            -e DEFAULT_FQ \
            -e MQ_IOSCHED_DEADLINE \
            -e MQ_IOSCHED_KYBER \
            -e IOSCHED_BFQ \
            -e BFQ_GROUP_IOSCHED \
            -e ENERGY_MODEL \
            -e CPU_IDLE \
            -e CPU_IDLE_GOV_MENU \
            -e CPU_IDLE_GOV_TEO \
            -e ARM_PSCI_CPUIDLE \
            -e CPU_FREQ \
            -e CPU_FREQ_STAT \
            -e CPU_FREQ_TIMES \
            -e CPU_FREQ_GOV_POWERSAVE \
            -e CPU_FREQ_GOV_CONSERVATIVE \
            -e CPU_FREQ_GOV_USERSPACE \
            -e CPU_FREQ_GOV_ONDEMAND \
            -e ZRAM \
            -e ZSMALLOC \
            -e ZRAM_WRITEBACK \
            -e CRYPTO_LZ4HC \
            -e CRYPTO_LZ4K \
            -e CRYPTO_LZ4KD \
            -e CRYPTO_ZSTD \
            -e CRYPTO_842 \
            -e CRYPTO_LZO \
            -e CRYPTO_DEFLATE \
            -e ZRAM_DEF_COMP_LZ4KD \
            -e SWAP \
            -e ZSWAP \
            -e ANDROID_SIMPLE_LMK \
            -e CPU_FREQ_GOV_SCHEDHORIZON \
            -e CPU_FREQ_DEFAULT_GOV_SCHEDHORIZON \
            --set-val LITTLE_CPU_MASK 15 \
            --set-val BIG_CPU_MASK 112 \
            --set-val PRIME_CPU_MASK 128 \
            -e LRU_GEN \
            -e LRU_GEN_ENABLED


          # Â∫îÁî®MIUI‰ºòÂåñÈÖçÁΩÆ
          echo "üîß Â∫îÁî®MIUI‰ºòÂåñÈÖçÁΩÆ..."
          scripts/config --file out/.config \
            --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
                  -e PERF_CRITICAL_RT_TASK \
                  -e SF_BINDER \
                  -e OVERLAY_FS \
                  -e DEBUG_FS \
                  -e MIGT \
                  -e MIGT_ENERGY_MODEL \
                  -e MIHW \
                  -e PACKAGE_RUNTIME_INFO \
                  -e BINDER_OPT \
                  -e KPERFEVENTS \
                  -e MILLET \
                  -e PERF_HUMANTASK \
                  -e LTO_CLANG \
                  -e LOCALVERSION_AUTO \
                  -e SF_BINDER \
                  -e XIAOMI_MIUI \
                  -d MI_MEMORY_SYSFS \
                  -e TASK_DELAY_ACCT \
                  -e MIUI_ZRAM_MEMORY_TRACKING \
                  -d CONFIG_MODULE_SIG_SHA512 \
                  -d CONFIG_MODULE_SIG_HASH \
                  -e MI_FRAGMENTION \
                  -e PERF_HELPER \
                  -e BOOTUP_RECLAIM \
                  -e MI_RECLAIM \
                  -e RTMM

          # ËøΩÂä†KernelSUÈÖçÁΩÆÂà∞ÂΩìÂâçÈÖçÁΩÆ
              scripts/config --file out/.config \
                  -e KSU \
                  -e KSU_MANUAL_HOOK \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -e KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -e KSU_SUSFS_SUS_SU
                  

          # ÁºñËØëÂèÇÊï∞‰ºòÂåñ
          scripts/config --file out/.config \
            --set-str CONFIG_CC_VERSION_TEXT "Clang 21.0.0git" \
            --set-str CONFIG_LD_VERSION      "LLD 17.0.0" \
            -e LTO_CLANG_THIN \
            -e THIN_ARCHIVES \
            -e HAVE_ARCH_PREL32_RELOCATIONS

          # ÊâßË°åÁºñËØë
          make -j$(nproc) \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            ${MAKE_ARGS} \
            LTO=thin \
            CC="ccache clang" \
            LD="ld.lld" \
            AR="llvm-ar" \
            NM="llvm-nm" \
            STRIP="llvm-strip" \
            OBJCOPY="llvm-objcopy" \
            OBJDUMP="llvm-objdump" \
            READELF="llvm-readelf" \
            HOSTCC="ccache clang" \
            HOSTCXX="ccache clang++" \
            HOSTAR="llvm-ar" \
            HOSTLD="ld.lld" \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="${KCFLAGS}" \
            LDFLAGS="${LDFLAGS}"

      - name: 5.Êü•ÁúãÊàêÊûú
        run: |
            cd $GITHUB_WORKSPACE/kernel_workspace/android_kernel/out/arch/arm64/boot
            ls
            strings Image | grep "Linux version"
            cp Image $GITHUB_WORKSPACE/kernel_workspace/src/

      - name: 6.‰∏ä‰º†Âà∑ÂÖ•ÂåÖ
        uses: actions/upload-artifact@v4
        with:
          name: cmi_${{ github.event.inputs.phone}}
          path: kernel_workspace/src/*
          retention-days: 3
