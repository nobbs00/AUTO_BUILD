name: Build SM8250 MI Kernel
on:
  workflow_dispatch:
    inputs:
      phone:
        description: 'ÈÄâÊã©ÊâãÊú∫ÂûãÂè∑Ôºö'
        required: true
        default: 'MI10_Pro'
        type: choice
        options:
          - MI10_Pro
      version:
        description: 'Ëá™ÂÆö‰πâÁâàÊú¨ÂêçÔºàÂ¶Çperf-xxxÔºâ/ÂèØ‰∏∫Á©∫ÔºàÂàô‰∏∫perfÔºâ'
        required: false
        type: string
jobs:
  build_job:
    runs-on: ubuntu-22.04

      - name: ÂÆâË£ÖÁºñËØë‰æùËµñ
        run: sudo apt-get install -y libssl-dev ncurses-dev xmlto kmod flex bison ccache

      - name: 1.‰∏ãËΩΩÁºñËØëÂ∑•ÂÖ∑
        run: |
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace
          cd $GITHUB_WORKSPACE/kernel_workspace
          wget -q https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240125-release/Clang-19.0.0git-20240125.tar.gz
          mkdir -p clang
          tar -xzf Clang-19.0.0git-20240125.tar.gz -C clang

      - name: 2.ÂÖãÈöÜÊ∫êÁ†Å‰∏éË°•‰∏Å
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/yspbwx2010/kernel_xiaomi_sm8250_mod.git --depth=1 android_kernel
          git clone https://github.com/nobbs00/AnyKernel3.git src

      - name: 3.ÂÆâË£ÖKSUN
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android_kernel
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs || exit 1
        
      - name: 6.ÂºÄÂßãÊûÑÂª∫
        run: |
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$PATH
          export MAKE_ARGS="O=out"
          echo "Updated PATH: $PATH"
          clang --version
          
          cd $GITHUB_WORKSPACE/kernel_workspace/android_kernel
          
          # Ëá™ÂÆö‰πâÁâàÊú¨Â§ÑÁêÜ
          if [ -n "${{ inputs.version }}" ]; then
            echo "ËÆæÁΩÆËá™ÂÆö‰πâÁâàÊú¨: ${{ inputs.version }}"
            sed -i 's/ -dirty//g' ./scripts/setlocalversion
            sed -i '$s|echo "$res"|echo "-perf-${{ inputs.version }}"|' ./scripts/setlocalversion
          else
            echo "‰ΩøÁî®ÈªòËÆ§ÁâàÊú¨"
            sed -i 's/ -dirty//g' ./scripts/setlocalversion
            sed -i '$s|echo "$res"|echo "-perf"|' ./scripts/setlocalversion
          fi

          # ËÆæÂ§áÈÖçÁΩÆÂ§ÑÁêÜ
          case "${{ inputs.phone }}" in
              "MI10_Pro")
                  DEVICE="cmi"
                  DEFCONFIG="cmi_defconfig"
                  ;;
              *)
                  echo "ÈîôËØØÔºöÊú™Áü•ËÆæÂ§á"
                  exit 1
                  ;;
          esac

          # ÁîüÊàêÈÖçÁΩÆ
          echo "üîß ÁîüÊàê $DEFCONFIG ÈÖçÁΩÆ..."
          make $MAKE_ARGS $DEFCONFIG

          # Â∫îÁî®‰ºòÂåñÈÖçÁΩÆ
          echo "üîß Â∫îÁî®ÂÜÖÊ†∏‰ºòÂåñÈÖçÁΩÆ..."
          scripts/config --file out/.config \
            -e KALLSYMS \
            -e KALLSYMS_ALL \
            -e KPROBES \
            -e HAVE_KPROBES \
            -e KPROBE_EVENTS \
            -e TMPFS_XATTR=y \
            -e TMPFS_POSIX_ACL \
            -e IP_NF_TARGET_TTL \
            -e IP6_NF_TARGET_HL \
            -e IP6_NF_MATCH_HL \
            -e UCLAMP_TASK \
            -e TCP_CONG_ADVANCED \
            -e TCP_CONG_BIC \
            -e TCP_CONG_CUBIC \
            -e TCP_CONG_WESTWOOD \
            -e TCP_CONG_HTCP \
            -e TCP_CONG_HSTCP \
            -e TCP_CONG_HYBLA \
            -e TCP_CONG_VEGAS \
            -e TCP_CONG_NV \
            -e TCP_CONG_SCALABLE \
            -e TCP_CONG_LP \
            -e TCP_CONG_VENO \
            -e TCP_CONG_YEAH \
            -e TCP_CONG_ILLINOIS \
            -e TCP_CONG_DCTCP \
            -e TCP_CONG_CDG \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            -e NET_SCHED \
            -e NET_SCH_HTB \
            -e NET_SCH_HFSC \
            -e NET_SCH_PRIO \
            -e NET_SCH_MULTIQ \
            -e NET_SCH_RED \
            -e NET_SCH_SFB \
            -e NET_SCH_SFQ \
            -e NET_SCH_TEQL \
            -e NET_SCH_TBF \
            -e NET_SCH_CBS \
            -e NET_SCH_ETF \
            -e NET_SCH_TAPRIO \
            -e NET_SCH_GRED \
            -e NET_SCH_NETEM \
            -e NET_SCH_DRR \
            -e NET_SCH_MQPRIO \
            -e NET_SCH_SKBPRIO \
            -e NET_SCH_CHOKE \
            -e NET_SCH_QFQ \
            -e NET_SCH_CODEL \
            -e NET_SCH_FQ_CODEL \
            -e NET_SCH_CAKE \
            -e NET_SCH_FQ \
            -e NET_SCH_HHF \
            -e NET_SCH_PIE \
            -e NET_SCH_FQ_PIE \
            -e NET_SCH_INGRESS \
            -e NET_SCH_PLUG \
            -e NET_SCH_ETS \
            -e NET_SCH_FIFO \
            -e NET_SCH_DEFAULT \
            -e DEFAULT_FQ \
            -e MQ_IOSCHED_DEADLINE \
            -e MQ_IOSCHED_KYBER \
            -e IOSCHED_BFQ \
            -e BFQ_GROUP_IOSCHED \
            -e ENERGY_MODEL \
            -e CPU_IDLE \
            -e CPU_IDLE_GOV_MENU \
            -e CPU_IDLE_GOV_TEO \
            -e ARM_PSCI_CPUIDLE \
            -e CPU_FREQ \
            -e CPU_FREQ_STAT \
            -e CPU_FREQ_TIMES \
            -e CPU_FREQ_GOV_POWERSAVE \
            -e CPU_FREQ_GOV_CONSERVATIVE \
            -e CPU_FREQ_GOV_USERSPACE \
            -e CPU_FREQ_GOV_ONDEMAND \
            -e ZRAM \
            -e ZSMALLOC \
            -e ZRAM_WRITEBACK \
            -e CRYPTO_LZ4 \
            -e CRYPTO_LZ4HC \
            -e CRYPTO_LZ4K \
            -e CRYPTO_LZ4KD \
            -e CRYPTO_ZSTD \
            -e CRYPTO_842 \
            -e CRYPTO_LZO \
            -e CRYPTO_DEFLATE \
            --set-str ZRAM_DEF_COMP lz4kd \
            -e ZRAM_DEF_COMP_LZ4KD \
            -e SWAP \
            -e ZSWAP \
            -e ANDROID_SIMPLE_LMK

          # Â∫îÁî®MIUI‰ºòÂåñÈÖçÁΩÆ
          echo "üîß Â∫îÁî®MIUI‰ºòÂåñÈÖçÁΩÆ..."
          scripts/config --file out/.config \
            --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
                   -e PERF_CRITICAL_RT_TASK \
                  -e SF_BINDER \
                  -e OVERLAY_FS \
                  -d DEBUG_FS \
                  -e MIGT \
                  -e MIGT_ENERGY_MODEL \
                  -e MIHW \
                  -e PACKAGE_RUNTIME_INFO \
                  -e BINDER_OPT \
                  -e KPERFEVENTS \
                  -e MILLET \
                  -e PERF_HUMANTASK \
                  -d LTO_CLANG \
                  -d LOCALVERSION_AUTO \
                  -e SF_BINDER \
                  -e XIAOMI_MIUI \
                  -d MI_MEMORY_SYSFS \
                  -e TASK_DELAY_ACCT \
                  -e MIUI_ZRAM_MEMORY_TRACKING \
                  -d CONFIG_MODULE_SIG_SHA512 \
                  -d CONFIG_MODULE_SIG_HASH \
                  -e MI_FRAGMENTION \
                  -e PERF_HELPER \
                  -e BOOTUP_RECLAIM \
                  -e MI_RECLAIM \
                  -e RTMM

          # ËøΩÂä†KernelSUÈÖçÁΩÆÂà∞ÂΩìÂâçÈÖçÁΩÆ
              scripts/config --file out/.config \
                  -e KSU \
                  -e KSU_MANUAL_HOOK \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -d KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -d KSU_SUSFS_SUS_SU
                  
          # ÁºñËØëÂÜÖÊ†∏
          echo "üöÄ ÂºÄÂßãÁºñËØëÂÜÖÊ†∏..."
          make $MAKE_ARGS -j$(nproc --all) \
            CC=clang \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi-

      - name: 7.Â§ÑÁêÜÁºñËØë‰∫ßÁâ©
        run: |
          # ‰øÆÊ≠£‰∫ßÁâ©Ë∑ØÂæÑ
          KERNEL_IMAGE="$GITHUB_WORKSPACE/kernel_workspace/android_kernel/out/arch/arm64/boot/Image"
          
          if [ ! -f "$KERNEL_IMAGE" ]; then
            echo "ÈîôËØØÔºöÂÜÖÊ†∏ÈïúÂÉèÊú™ÊâæÂà∞ÔºÅ"
            exit 1
          fi
          
          echo "‚úÖ ÁºñËØë‰∫ßÁâ©:"
          ls -lh $KERNEL_IMAGE
          strings $KERNEL_IMAGE | grep "Linux version"
          
          # Â§çÂà∂Âà∞AnykernelÁõÆÂΩï
          ANY_KERNEL_DIR="$GITHUB_WORKSPACE/kernel_workspace/src/"
          mkdir -p $ANY_KERNEL_DIR
          cp $KERNEL_IMAGE $ANY_KERNEL_DIR/

      - name: 8.‰∏ä‰º†Âà∑ÂÖ•ÂåÖ
        uses: actions/upload-artifact@v4
        with:
          name: NO_${{ inputs.phone }}
          path: kernel_workspace/src/*
          retention-days: 3
